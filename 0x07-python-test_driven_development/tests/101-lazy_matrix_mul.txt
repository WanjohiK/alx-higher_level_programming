==========================================
Tests for the 101-lazy_matrix_mul module
==========================================

This module has only one function which is the ``lazy_matrix_mul()``
function which that multiplies 2 matrices returns a new matrix.

Importing the ``lazy_matrix_mul()`` function
=========================================
        >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

checking for module docstring
::
        >>> mod_string = __import__("101-lazy_matrix_mul").__doc__
        >>> len(mod_string) > 5
        True

checking for function docstring
::
        >>> func_docs = lazy_matrix_mul.__doc__
        >>> len(func_docs) > 5
        True

checking if wrong data Type is passed
::
        >>> lazy_matrix_mul([[2, 3, 5], [4, 2, 0]], None)
	Traceback (most recent call last):
	...
	TypeError: Object arrays are not currently supported
	>>> lazy_matrix_mul("hello", [[2, 3, 5], [4, 2, 6]])
	Traceback (most recent call last):
	...
	ValueError: Scalar operands are not allowed, use '*' instead
	>>> lazy_matrix_mul([[1, 2], "there"], [[3, 4, 5], [6, 7, 8]])
	Traceback (most recent call last):
	...
	ValueError: setting an array element with a sequence
	>>> lazy_matrix_mul([[1, 2], [3, 4], [5, 6]], [7, 8, 9])
	Traceback (most recent call last):
	...
	ValueError: shapes (3,2) and (3,) not aligned: 2 (dim 1) != 3 (dim 0)
	>>> lazy_matrix_mul([{1, 2}, [3, 4]], [[5, 6], [7, 8]])
	Traceback (most recent call last):
	...
	TypeError: Object arrays are not currently supported
	>>> lazy_matrix_mul([[1.3, 2, 4], [2.5, 3.5]], [[1, 2], [4, 5]])
	Traceback (most recent call last):
	...
	ValueError: setting an array element with a sequence.
	>>> lazy_matrix_mul([[1, 2.0, 3], [4.0, 1, 4]], [[1, 2, 3], [4, 2]])
	Traceback (most recent call last):
	...
	ValueError: setting an array element with a sequence.

Checking when wrong values are passed as arguement
::
	>>> lazy_matrix_mul([[]], [[2, 4]])
	Traceback (most recent call last):
	...
	ValueError: shapes (1,0) and (1,2) not aligned: 0 (dim 1) != 1 (dim 0)
	>>> lazy_matrix_mul([], [[2, 4, 8]])
	Traceback (most recent call last):
	...
	ValueError: shapes (0,) and (1,3) not aligned: 0 (dim 0) != 1 (dim 0)
	>>> lazy_matrix_mul([[1, 4.0], [1, 4.0]], [])
	Traceback (most recent call last):
	...
	ValueError: shapes (2,2) and (0,) not aligned: 2 (dim 1) != 0 (dim 0)
	>>> lazy_matrix_mul([[1.5, 4.5], [1, 4]], [[]])
	Traceback (most recent call last):
	...
	ValueError: (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)
	>>> lazy_matrix_mul([[1, 4.0], [1, 4.0]], [[3, 2],[]])
	Traceback (most recent call last):
	...
	ValueError:  setting an array element with a sequence.
	>>> lazy_matrix_mul([[1, 4.2, 3], [1, 4.0, 4]], [[1, 2], [3, 4]])
	Traceback (most recent call last):
	...
	ValueError: shapes (2,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)
	>>> lazy_matrix_mul([[1, 2], [3, 6], [4, 2]], [[1, 2], [3, 4], [5, 6]])
	Traceback (most recent call last):
	...
	ValueError: shapes (3,2) and (3,2) not aligned: 2 (dim 1) != 3 (dim 0)


check for normal functionality of matrices
::
	>>> print(lazy_matrix_mul([[2, 3], [1, 0]], [[2, 3], [0, 1]]))
	[[4, 9]
	 [2, 3]]
	>>> print(lazy_matrix_mul([[1.24, 4.2], [4, 3.2]], [[3, 5], [1.5, 4.9]]))
	[[10.02, 26.78]
	 [16.8, 35.68]]
	>>> print(lazy_matrix_mul([[3, 4, 0], [-2, 6, -3], [7, -4, 1]], [[2, -5], [5, -6], [-1, -7]]))
	[[26, -39]
	 [29, -5]
	 [-7, -18]]
	>>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1.5, 2.5, 3.5], [4.5, 6.5, 7.5]]))
	[[10.5, 15.5, 18.5]
	 [22.5, 33.5, 40.5]]
	
Checking for too few args:
	>>> lazy_matrix_mul([[1, 2], [3, 4]])
	Traceback (most recent call last):
	...
	TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

Checking for too many args:
	 >>> lazy_matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, 8]], [[9, 10], [11, 12]])
	 Traceback (most recent call last):
	 ...
	 TypeError: lazy_matrix_mul() takes 2 positional arguments but 3 were given
