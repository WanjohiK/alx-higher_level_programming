==========================================
Tests for the 5-text_indentation module
==========================================

This module has only one function which is the ``text_indentation()``
function which  prints a text with 2 new lines after each of these characters: ., ? and :.
Raise an ``exception`` if the argument is not a string.

Importing the ``text_indentation()`` function
=========================================
        >>> text_indentation = __import__('5-text_indentation').text_indentation

checking for module docstring
::
        >>> mod_string = __import__("5-text_indentation").__doc__
        >>> len(mod_string) > 5
        True

checking for function docstring
::
        >>> func_docs = text_indentation.__doc__
        >>> len(func_docs) > 5
        True

checking if text is not a string:
::
    >>> text_indentation(15)
    Traceback (most recent call last):
        ...
    TypeError: text must be a string

    >>> text_indentation(["Hello", "World"])
    Traceback (most recent call last):
        ...
    TypeError: text must be a string

checking if the function works:
::
    >>> text_indentation("This is a sentence. This is another sentence? And here is a third one:")
    This is a sentence.
    <BLANKLINE>
    This is another sentence?
    <BLANKLINE>
    And here is a third one:
    <BLANKLINE>

checking the implementation of text_indentation function
::
    >>> text_indentation("""Lorem ipsum dolor sit amet, consectetur adipiscing elit. \
    ... Quonam modo? Utrum igitur tibi litteram videor an totas paginas commovere? \
    ... Non autem hoc: igitur ne illud quidem. Fortasse id optimum, sed ubi illud: \
    ... Plus semper voluptatis? Teneo, inquit, finem illi videri nihil dolere. \
    ... Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum \
    ... rationi oboediens. Si id dicis, vicimus. Inde sermone vario sex illa a Dipylo \
    ... stadia confecimus. Sin aliud quid voles, postea. Quae animi affectio suum \
    ... cuique tribuens atque hanc, quam dico. Utinam quidem dicerent alium alio \
    ... beatiorem! Iam ruinas videres""")
    Lorem ipsum dolor sit amet, consectetur adipiscing elit.
    <BLANKLINE>
    Quonam modo?
    <BLANKLINE>
    Utrum igitur tibi litteram videor an totas paginas commovere?
    <BLANKLINE>
    Non autem hoc:
    <BLANKLINE>
    igitur ne illud quidem.
    <BLANKLINE>
    Fortasse id optimum, sed ubi illud:
    <BLANKLINE>
    Plus semper voluptatis?
    <BLANKLINE>
    Teneo, inquit, finem illi videri nihil dolere.
    <BLANKLINE>
    Transfer idem ad modestiam vel temperantiam, quae est moderatio cupiditatum rationi oboediens.
    <BLANKLINE>
    Si id dicis, vicimus.
    <BLANKLINE>
    Inde sermone vario sex illa a Dipylo stadia confecimus.
    <BLANKLINE>
    Sin aliud quid voles, postea.
    <BLANKLINE>
    Quae animi affectio suum cuique tribuens atque hanc, quam dico.
    <BLANKLINE>
    Utinam quidem dicerent alium alio beatiorem! Iam ruinas videres

    >>> text = "   Hello.  There?   "
    >>> text_indentation(text)
    Hello.
    <BLANKLINE>
    There?
    <BLANKLINE>

    >>> text_indentation(" . ? : ")
    .
    <BLANKLINE>
    ?
    <BLANKLINE>
    :
    <BLANKLINE>

    >>> text_indentation("Hello")
    Hello

    >>> text_indentation(" \n Hello. Magical Kenya?")
    <BLANKLINE>
     Hello.
    <BLANKLINE>
    Magical Kenya?
    <BLANKLINE>

            >>> text_indentation("Hello, Beautiful Doreen?\n")
            Hello, Beautiful Doreen?
            <BLANKLINE>
            <BLANKLINE>

checking when wrong data types are passed
    ::
    >>> text_indentation(913)
    Traceback (most recent call last):
    ...
    TypeError: text must be a string
    >>> text_indentation(["Kiki ?"])
    Traceback (most recent call last):
    ...
    TypeError: text must be a string
    >>> text_indentation(("Hello", 913))
    Traceback (most recent call last):
    ...
    TypeError: text must be a string

checking when None is passed
::
    >>> text_indentation(None)
    Traceback (most recent call last):
    ...
    TypeError: text must be a string

checking when no arguement is passed
::
    >>> text_indentation()
    Traceback (most recent call last):
    ...
    TypeError: text_indentation() missing 1 required positional argument: 'text'

checking when more than required arguement is passed
::

    >>> text_indentation("hello", "world")
    Traceback (most recent call last):
    ...
    TypeError: text_indentation() takes 1 positional argument but 2 were given

::
END.
===
